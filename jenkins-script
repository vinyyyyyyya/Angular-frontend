pipeline {
    agent {
        docker {
            image 'node:14' // Use the Node.js image with the desired version
            args '-u root' // Optionally, run the Docker container as root
        }
    }
    stages {
        
        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }
        stage('SonarQube Analysis') {
             environment {
              SONAR_URL = "http://3.110.214.185:9000"
              }
           steps {
               withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
               sh 'npm install -g sonarqube-scanner && sonar-scanner -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
            }
          }
         }
        stage('Build and Test') {
           environment {
             DOCKER_IMAGE = "vinayak345/demo:${BUILD_NUMBER}"
          // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
             REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
        }
        stage('Publish Artifacts') {
            steps {
                // Copy the built files to a location where they can be archived or deployed
                sh 'cp -r dist/* /var/www/html' // Example destination path
            }
        }
    }
    
}

